/*
 * ACConfManager.cpp
 *
 *  Created on: 2015年5月4日
 *      Author: HDZhang
 */

#include<iostream>
#include<fstream>
#include<memory.h>
#include<sstream>
#include"../include/ACConfManager.h"

ACConfManager::ACConfManager(string path)
{
	if(path[path.size()-1]!='/')
	{
		this->crmdemFileName=path+"/crmdem.fml32";
		this->metadataFileName=path+"/metadata.in";
	}
	else
	{
		this->crmdemFileName=path+"crmdem.fml32";
		this->metadataFileName=path+"metadata.in";
	}
	this->maxmaxFieldNum=0;
	readCrmdemFml32();
}

int ACConfManager::readCrmdemFml32()
{
	ifstream ifstre;
	ifstre.open(this->crmdemFileName);
	if(ifstre.is_open())
	{
		while(!ifstre.eof())
		{
			string currStr;
			getline(ifstre,currStr);
			istringstream istringStre(currStr);

			FieldMess currFieldMess;
			istringStre>>currFieldMess.name>>currFieldMess.size;
			string currFieldType={0};
			istringStre>>currFieldType;
			if(currFieldType=="long")
				currFieldMess.type=FieldType::LONG;
			else if(currFieldType=="string")
				currFieldMess.type=FieldType::STRING;
			else if(currFieldType=="fml32")
				currFieldMess.type=FieldType::FML32;

			this->m_allFileMess.insert(pair<string,FieldMess>(currFieldMess.name,currFieldMess));
			if(currFieldMess.size>maxmaxFieldNum)
			{
				this->maxmaxFieldNum=currFieldMess.size;
			}
			cout<<currStr<<endl;
		}
		cout<<"=====读取CrmdemFml32文件完成====="<<endl;
		cout<<"读取数据"<<m_allFileMess.size()<<"条！"<<endl;
		ifstre.close();
	}
	else
	{
		cout<<"=====读取CrmdemFml32文件异常====="<<endl;
		ifstre.close();
		return RETURN_FAILED;
	}

	return 0;
}

int ACConfManager::writeCrmdemFml32(FieldMess fieldMess,bool needEndl)
{
	ofstream ofstre;
	ofstre.open(this->crmdemFileName,ofstream::app);
	if(ofstre.is_open())
	{
		ostringstream ostringstre;
		if(needEndl)
			ostringstre<<endl;
		ostringstre<<fieldMess.name;
		for(int i=fieldMess.name.size();i<35;i++)
		{
			ostringstre<<" ";
		}
		ostringstre<<(++this->maxFieldNum)<<"    ";
		if(fieldMess.type==FieldType::LONG)
			ostringstre<<"long"<<"   ";
		else if(fieldMess.type==FieldType::STRING)
			ostringstre<<"string"<<"   ";
		else if(fieldMess.type==FieldType::FML32)
			ostringstre<<"fml32"<<"    ";

		ostringstre<<"-    -";

		ofstre<<ostringstre.str();
		ofstre.flush();
		//cout<<ostringstre.str()<<endl;
		cout<<"=====写入CrmdemFml32文件完成====="<<endl;
		ofstre.close();
	}
	else
	{
		cout<<"=====写入CrmdemFml32文件异常====="<<endl;
		ofstre.close();
		return RETURN_FAILED;
	}

	return 0;
}

int ACConfManager::parseFields(vector<FieldMess>& v_fields)
{
	bool needEndl=false;
	for(int i=0;i<v_fields.size();i++)
	{
		if(this->m_allFileMess.find(v_fields[i].name)!= this->m_allFileMess.end())
		{
			v_fields[i]=(this->m_allFileMess.find(v_fields[i].name))->second;
		}
		else
		{
			v_fields[i].size=this->maxFieldNum+1;
			writeCrmdemFml32(v_fields[i],needEndl);
			needEndl=true;
		}
		cout<<v_fields[i].name<<"	"<<v_fields[i].size<<"	"<<v_fields[i].type<<endl;
	}
	return 0;
}

int ACConfManager::writeMetadataIn()
{
	return 0;
}
