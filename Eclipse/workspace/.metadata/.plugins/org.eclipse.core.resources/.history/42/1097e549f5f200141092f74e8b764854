/*
 * base.cpp
 *
 *  Created on: 2014年12月14日
 *      Author: HDZhang
 */

#include<map>
#include"base.h"

using namespace std;
using namespace n_base;

map<string,string> n_base::m_baseMessage;

int n_base::getBaseMessage(const string keyName,string& codeTemplate)
{
    map<string,string>::iterator ite_baseMessage= m_baseMessage.find(keyName);
    if(ite_baseMessage!=m_baseMessage.end())
    {
        codeTemplate=ite_baseMessage->second;
        return RETURN_SUCCESS;
    }
    else
    {
        return RETURN_FAILED;
    }
}

int n_base::setBaseMessage(const string keyName,string codeTemplate)
{
    m_baseMessage.insert(map<string,string>::value_type(keyName,codeTemplate));
	return RETURN_SUCCESS;
}

map<string,map<string,string> > Base::m_keyMap;

map<string,string> Base::m_codeTemplateMap;

int Base::getKeyMap(const string keyName,map<string,string>& keyMap)
{
    map<string,map<string,string> >::iterator valueIter=Base::m_keyMap.find(keyName);
    if(valueIter!=Base::m_keyMap.end())
    {
        keyMap=valueIter->second;
        return RETURN_SUCCESS;
    }
    else
    {
        return RETURN_FAILED;
    }
}

int Base::getCodeTemplateMap(const string keyName,string& codeTemplate)
{
    map<string,string>::iterator codeTemplateIter= Base::m_codeTemplateMap.find(keyName);
    if(codeTemplateIter!=Base::m_codeTemplateMap.end())
    {
        codeTemplate=codeTemplateIter->second;
        return RETURN_SUCCESS;
    }
    else
    {
        return RETURN_FAILED;
    }
}

int Base::setKeyMap(const string keyName,map<string,string> keyMap)
{
    Base::m_keyMap.insert(map<string,map<string,string> >::value_type(keyName,keyMap));
    return RETURN_SUCCESS;
}

int Base::setCodeTemplateMap(const string keyName,string codeTemplate)
{
    Base::m_codeTemplateMap.insert(map<string,string>::value_type(keyName,codeTemplate));
    return RETURN_SUCCESS;
}

//显示初始化信息
void Base::showBaseMessage()
{
	for (map<string,map<string,string> >::iterator ite = Base::m_keyMap.begin();ite != Base::m_keyMap.end(); ite++)
	{
		cout << ite->first << endl<< "{"<< endl;
		for (map<string,string>::iterator ite1 = ite->second.begin();ite1 != ite->second.end(); ite1++)
		{
			cout <<"  "<< ite1->first << ":" << ite1->second << endl;
		}
		cout <<"}"<< endl;
	}
	for (map<string,string>::iterator ite = Base::m_codeTemplateMap.begin();ite != Base::m_codeTemplateMap.end(); ite++)
	{
		cout <<"  "<< ite->first << ":" << ite->second << endl;
	}

}


